{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to thinkgreen","text":"<p>Geography 510 Final Project</p>"},{"location":"#introduction","title":"Introduction","text":"<p>My package, Thinkgreen, was designed to show off the many skills and techniques that I learned over the course of my Geography 510 - Geographic Software Design course in the spring semester of 2023. The course focused on the creation and design of open-source Python packages that have capabilities for geospatial analysis and interactive mapping. In this class, I was exposed to Visual Studio Code, Google Colab, Anaconda, Streamlit, and other popular Python integrated development environment softwares (IDEs). We also learned about the inner workings of platforms like Github, which can be used to freely host our packages. This class has equipped me with the skills and knowledge to create and release my own geospatial Python packages. </p> <p>My package shows off how basic python skills can be used to create basic interactive web mapping. My package specifically shows how to create different kinds of charts that can then be added to the map. This functionality is helpful when needing to show off important trends in data, while displaying the geographic data at the same time in the background. </p> <ul> <li>GitHub repo: https://github.com/olilamm/thinkgreen  </li> <li>Documentation: https://olilamm.github.io/thinkgreen </li> <li>PyPi: https://pypi.org/project/thinkgreen </li> <li>Thinkgreen tutorial on YouTube: https://youtu.be/YTDpRf26bDs </li> <li>Free software: MIT license </li> </ul>"},{"location":"#special-features","title":"Special Features","text":"<ul> <li>Create an interactive map using Folium</li> <li>Adding dropdown widgets to change basemaps and graphs on a map</li> <li>Add vector (e.g., shapefile, GeoJSON, KML) and raster (e.g., GeoTIFF) data with minimal coding </li> <li>Download and display OpenStreetMap data </li> <li>Add functionalities such as search controls, draw controls, layer controls, and more</li> <li>Add images </li> <li>Add XYZ and vector tile services to a map</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-april-4-2023","title":"v0.0.1 - April 4, 2023","text":"<ul> <li>Initial release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/olilamm/thinkgreen/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>thinkgreen could always use more documentation, whether as part of the official thinkgreen docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/olilamm/thinkgreen/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up thinkgreen for local development.</p> <ol> <li> <p>Fork the thinkgreen repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/thinkgreen.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv thinkgreen\n$ cd thinkgreen/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 thinkgreen tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/olilamm/thinkgreen/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"foliumap/","title":"folium module","text":""},{"location":"foliumap/#thinkgreen.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>description</p> required Source code in <code>thinkgreen/foliumap.py</code> <pre><code>class Map(folium.Map):\n\"\"\"Create a folium map object.\n    Args:\n        folium (_type_): _description_\n    \"\"\"    \n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n        Args:\n            center (list, optional): The map center. Defaults to [20, 0].\n            zoom (int, optional): The zoom level. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            name=name,\n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#thinkgreen.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The map center. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level. Defaults to 2.</p> <code>2</code> Source code in <code>thinkgreen/foliumap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n    Args:\n        center (list, optional): The map center. Defaults to [20, 0].\n        zoom (int, optional): The zoom level. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#thinkgreen.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>thinkgreen/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        name=name,\n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install thinkgreen, run this command in your terminal:</p> <pre><code>pip install thinkgreen\n</code></pre> <p>This is the preferred method to install thinkgreen, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#install-from-github","title":"Install from GitHub","text":"<p>To install thinkgreen from GitHub using Git, run the following command in your terminal:</p> <pre><code>pip install git+https://github.com/olilamm/thinkgreen\n</code></pre>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for thinkgreen can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/olilamm/thinkgreen\n</code></pre>"},{"location":"installation/#upgrade-thinkgreen","title":"Upgrade thinkgreen","text":"<p>to upgrade to the latest version of thinkgreen, you can run the following command in your terminal: <pre><code>pip install -U thinkgreen\n</code></pre></p> <p>If you use conda, you can update thinkgreen to the latest version by running the following command in your terminal:</p> <pre><code>conda update -c conda-forge thinkgreen\n</code></pre> <p>To install the development version from GitHub directly within Jupyter notebook without using Git, run the following code:</p> <pre><code>import thinkgreen\nthinkgreen.update_package()\n</code></pre>"},{"location":"thinkgreen/","title":"thinkgreen module","text":"<p>Main module.</p>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n        def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n            if \"scroll_wheel_zoom\" not in kwargs:\n                kwargs[\"scroll_wheel_zoom\"] = True\n\n            super().__init__(center=center, zoom=zoom, **kwargs)\n\n            if \"height\" not in kwargs:\n                self.layout.height = \"500px\"\n            else:\n                self.layout.height = kwargs[\"height\"]\n\n            if \"fullscreen_control\" not in kwargs:\n                kwargs[\"fullscreen_control\"] = True\n            if kwargs[\"fullscreen_control\"]:\n                self.add_fullscreen_control()\n\n            if \"layers_control\" not in kwargs:\n                kwargs[\"layers_control\"] = False\n            if kwargs[\"layers_control\"]:\n                self.add_layers_control()\n\n        def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n            Args:\n                kwargs: Keyword arguments to pass to the search control.\n\n            Returns:\n                ipyleaflet.SearchControl: The search control.\n            \"\"\"\n            if \"url\" not in kwargs:\n                kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n            search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n            self.add_control(search_control)\n\n        def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n            Args:\n                kwargs: Keyword arguments to pass to the draw control.\n\n            Returns:\n                ipyleaflet.DrawControl: Draw control.\n            \"\"\"\n            draw_control = ipyleaflet.DrawControl(**kwargs)\n\n            draw_control.polyline =  {\n                \"shapeOptions\": {\n                    \"color\": \"#6bc2e5\",\n                    \"weight\": 8,\n                    \"opacity\": 1.0\n                }\n            }\n            draw_control.polygon = {\n                \"shapeOptions\": {\n                    \"fillColor\": \"#6be5c3\",\n                    \"color\": \"#6be5c3\",\n                    \"fillOpacity\": 1.0\n                },\n                \"drawError\": {\n                    \"color\": \"#dd253b\",\n                    \"message\": \"Oups!\"\n                },\n                \"allowIntersection\": False\n            }\n            draw_control.circle = {\n                \"shapeOptions\": {\n                    \"fillColor\": \"#efed69\",\n                    \"color\": \"#efed69\",\n                    \"fillOpacity\": 1.0\n                }\n            }\n            draw_control.rectangle = {\n                \"shapeOptions\": {\n                    \"fillColor\": \"#fca45d\",\n                    \"color\": \"#fca45d\",\n                    \"fillOpacity\": 1.0\n                }\n            }\n\n            self.add_control(draw_control)\n\n        def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n            Args:\n                kwargs: Keyword arguments to pass to the layers control.\n\n            Returns:\n                ipyleaflet.LayersControl: The search control.   \n            \"\"\"\n            layers_control = ipyleaflet.LayersControl(position=position)\n            self.add_control(layers_control)\n\n        def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n            Args:\n                kwargs: Keyword arguments to pass to the fullscreen control.\n\n            Returns:\n                ipyleaflet.FullscreenControl: Allows control of screensize.\n            \"\"\"\n            fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n            self.add_control(fullscreen_control)\n\n        def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n            Args:\n                url (str): The URL template of the tile layer.\n                attribution (str): The attribution of the tile layer.\n                name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n                kwargs: Keyword arguments to pass to the tile layer.\n\n            Returns:\n                ipyleaflet.TileLayer: Adds a new layer to the map.\n            \"\"\"\n            tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n            self.add_layer(tile_layer)\n\n        def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a base layer to the map.\n\n            Args:\n                basemap (dict): The basemap layer from an xyz url.\n\n            Returns:\n                xyzservices.providers: Adds a tile layer as a basemap.\n            \"\"\"\n\n            import xyzservices.providers as xyz\n\n            if basemap.lower() == \"roadmap\":\n                url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n                self.add_tile_layer(url, name=basemap, **kwargs)\n            elif basemap.lower() == \"satellite\":\n                url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n                self.add_tile_layer(url, name=basemap, **kwargs)\n            elif basemap.lower() == \"terrain\":\n                url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n                self.add_tile_layer(url, name=basemap, **kwargs)\n            else:\n                try:\n                    basemap = eval(f\"xyz.{basemap}\")\n                    url = basemap.build_url() \n                    attribution = basemap.attribution\n                    self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n                except:\n                    raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n\n        def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n            Args:\n                data (dict): The GeoJSON data.\n                kwargs: Keyword arguments to pass to the GeoJSON layer.\n\n            Returns:\n                ipyleaflet.Geojson: Adds a GeoJSON layer to map. \n            \"\"\"\n            import json\n\n            #for file paths:\n            if isinstance(data, str):\n                with open(data, \"r\") as f:\n                    data = json.load(f)\n\n            geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n            self.add_layer(geojson)\n\n        def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n            Args:\n                data (str): The path to the Shapefile.\n\n            Returns:\n                ipyleaflet.ShapeFile: Adds a shapefile to map.\n            \"\"\"\n            import geopandas as gpd\n            gdf = gpd.read_file(data)\n            geojson = gdf.__geo_interface__\n            self.add_geojson(geojson, name=name, **kwargs)\n\n        def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n            Args:\n                url (str): The URL of the raster layer.\n                name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n                fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n\n            Returns:\n                ipyleaflet.raster: Adds a raster image to the map. \n            \"\"\"\n            import requests\n\n            titiler_endpoint = \"https://titiler.xyz\"\n\n            r = requests.get(\n                f\"{titiler_endpoint}/cog/info\",\n                params = {\n                    \"url\": url,\n                }\n            ).json()\n\n            bounds = r[\"bounds\"]\n\n            r = requests.get(\n                f\"{titiler_endpoint}/cog/tilejson.json\",\n                params = {\n                    \"url\": url,\n                }\n            ).json()\n\n            tile = r[\"tiles\"][0]\n\n            self.add_tile_layer(url=tile, name=name, **kwargs)\n\n            if fit_bounds:\n                bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n                self.fit_bounds(bbox)\n\n        def add_image(self, path, w=250, h=250):\n\"\"\"Adds a small image (like your logo) to the bottom right of the map\n            Args:\n                file (str): the filepath of the image\n                w (int) : width of the image (defaults 250 px)\n                h (int) : height of the image (defaults 250 px)\n\n            Returns:\n                ipywidgets.image: Adds an image to the map. \n            \"\"\"\n            import ipywidgets as widgets\n\n            file = open(path, \"rb\")\n            image = file.read()\n            i = widgets.Image(\n                value=image,\n                format='png',\n                width=w,\n                height=h,\n            )\n\n            output_widget = widgets.Output()\n            output_control = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n            self.add_control(output_control)\n            with output_widget:\n                display(i)\n\n        def add_vector(self, data, name, **kwarags):\n\"\"\"Adds a vector layer to the map.\n            Can be GeoJson, shapefile, GeoDataFrame, etc\n            Args:\n                data: the vector data\n                name: the type of data. example: 'GeoJson', 'Shapefile', 'GeoDataFrame'\n                kwargs: Keyword arguments to pass to the layer.\n\n            Returns:\n                ipyleaflet.vector: Adds a vector layer to the map. \n            \"\"\"\n            if name == \"GeoJson\":\n                self.add_geojson(self, data, name, **kwargs)\n            elif name == \"Shapefile\":\n                self.add_shp(self, data, name, **kwargs)\n            elif name == \"GeoDataFrame\":\n                self.add_geodf(self, data, name, **kwargs)\n            else:\n                print(\"This type of vector is not supported yet.\")\n\n        def add_toolbar(self, position=\"topright\", **kwargs):\n\"\"\"Adds a toolbar using ipywidgets to change the basemap.\n\n            Args:\n                m (thinkgreen.Map, optional): The dropdown widget.\n\n            Returns:\n                ipywidgets: The tool GUI widget\n            \"\"\"\n\n            import ipywidgets as widgets \n            allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n            if position not in allowed_positions:\n                raise Exception(f\"position must be one of {allowed_positions}\")\n\n            basemap = widgets.Dropdown(\n            options=['ROADMAP', 'SATELLITE', 'TERRAIN'],\n            value=None,\n            description='Basemap:',\n            style={'description_width': 'initial'},\n            layout=widgets.Layout(width='250px')\n            )\n\n            basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n            self.add_control(basemap_ctrl)\n            def change_basemap(change):\n                if change['new']:\n                    self.add_basemap(basemap.value)\n\n            basemap.observe(change_basemap, names='value')\n\n            def toolbar_click(b):\n                with b:\n                    b.clear_output()\n\n                    if b.icon == 'map':\n                        self.add_control(basemap_ctrl)\n\n        def add_plot(self, x, y, **kwargs):\n\"\"\"Add a plot to the map.\n\n            Args:\n                x (str, optional): Data to use for the x-axis.\n                y (str, optional): Data to use for the y-axis.\n                **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n            Returns:\n                matplotlib.plot: Generates a plot graph. \n            \"\"\"\n\n            import matplotlib.pyplot as plt\n            import numpy as np\n\n            plt.style.use('_mpl-gallery')\n\n            # plot\n            fig, ax = plt.subplots()\n            ax.plot(x, y, linewidth=2.0)\n            ax.set(xlabel='x', ylabel='y', title='Plot')\n\n            plt.show()\n\n        def add_bar(self, x, y):\n\"\"\"Add a bar graph to the map.\n\n            Args:\n                x (str, optional): Data to use for the x-axis.\n                y (str, optional): Data to use for the y-axis.\n                **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n            Returns:\n                matplotlib.plot: Generates a bar graph. \n            \"\"\"\n            import matplotlib.pyplot as plt\n            import numpy as np\n\n            plt.style.use('_mpl-gallery')\n\n            # plot\n            fig, ax = plt.subplots()\n            ax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\n            ax.set(xlabel='x', ylabel='y', title='Bar Graph')\n\n            plt.show()\n\n        def add_pie(self, x):\n\"\"\"Add a pie chart to the map.\n\n            Args:\n                x (str, optional): Data to use for the pie chart.\n                **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n            Returns:\n                matplotlib.plot: Generates a pie graph. \n            \"\"\"\n            import matplotlib.pyplot as plt\n            import numpy as np\n\n            plt.style.use('_mpl-gallery-nogrid')\n\n            # plot\n            fig, ax = plt.subplots()\n            ax.pie(x, radius=3, wedgeprops={\"linewidth\": 1, \"edgecolor\": \"white\"}, frame=True)\n            ax.set(xlabel='x', title='Pie Chart')\n\n            plt.show()\n\n\n        def add_chart(self, position=\"bottomleft\", **kwargs):\n\"\"\"Add a figure to the map.\n\n            Args:\n                content (str | ipywidgets.Widget | object): The chart to add.\n                position (str, optional): The position of the widget. Defaults to \"bottomright\".\n                **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n            Returns:\n                ipywidgets.chart: Adds a chart dropdown widget to map. \n            \"\"\"\n            import streamlit as st\n            import ipywidgets as widgets\n\n            allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n            if position not in allowed_positions:\n                raise Exception(f\"position must be one of {allowed_positions}\")\n\n            chart_type = widgets.Dropdown(\n                options=['PLOT','BAR','PIE'],\n                value=None,\n                description='Chart:',\n                style={'description_width': 'initial'},\n                layout=widgets.Layout(width='250px')\n            )\n\n            chart_ctrl = ipyleaflet.WidgetControl(widget=chart_type, position=position)\n            self.add_control(chart_ctrl)\n\n            def change_chart(change):\n                if change['new']:\n                    selected_option = chart_type.value\n                    self.add_widget(selected_option, position=position)\n\n            chart_type.observe(change_chart, names='value')\n\n\n\n        def add_widget(self, content, position=\"bottomright\", **kwargs):\n\"\"\"Add a widget (e.g., text, HTML, figure) to the map.\n\n            Args:\n                content (str | ipywidgets.Widget | object): The widget to add.\n                position (str, optional): The position of the widget. Defaults to \"bottomright\".\n                **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n            Returns:\n                ipyleaflet.WidgetControl: Adds a widget to the map. \n            \"\"\"\n\n            allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n            if position not in allowed_positions:\n                raise Exception(f\"position must be one of {allowed_positions}\")\n\n            if \"layout\" not in kwargs:\n                kwargs[\"layout\"] = widgets.Layout(padding=\"0px 4px 0px 4px\")\n            try:\n                if isinstance(content, str):\n                    widget = widgets.HTML(value=content, **kwargs)\n                    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n                else:\n                    output = widgets.Output(**kwargs)\n                    with output:\n                        display(content)\n                    control = ipyleaflet.WidgetControl(widget=output, position=position)\n                self.add(control)\n\n            except Exception as e:\n                raise Exception(f\"Error adding widget: {e}\")\n\n\n        def add_csv(self, in_csv, out_file, out_format, x=\"longitude\", y=\"latitude\"):\n            import csv\n            import geopandas as gpd\n            from shapely.geometry import Point\n\n            # Read CSV file and extract lat/lon coordinates\n            points = []\n            with open(in_csv, 'r') as csv_file:\n                reader = csv.DictReader(csv_file)\n                for row in reader:\n                    lon = float(row[x])\n                    lat = float(row[y])\n                    point = Point(lon, lat)\n                    points.append(point)\n\n            # Create a GeoDataFrame from the points\n            gdf = gpd.GeoDataFrame(geometry=points)\n\n            # Save GeoDataFrame to the specified output format\n            if out_format == 'shapefile':\n                gdf.to_file(out_file, driver='ESRI Shapefile')\n            elif out_format == 'geojson':\n                gdf.to_file(out_file, driver='GeoJSON')\n            else:\n                print(\"Unsupported output format. Please choose either 'shapefile' or 'geojson'.\")\n\n            #gj = gdf.__geo_interface__\n            #self.add_csv(gj, out_file=out_file, out_format=out_format)\n\n\n\n        def add_points_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", label=None, layer_name=\"Marker cluster\"):\n\n            import pandas as pd\n            import folium\n            from folium.plugins import MarkerCluster\n            # Load CSV data into a pandas DataFrame\n            df = pd.read_csv(in_csv)\n\n            # Create a MarkerCluster layer\n            marker_cluster = MarkerCluster(name=layer_name)\n\n\n            # Iterate over rows and add markers to the cluster\n            for index, row in df.iterrows():\n                location = [row[y], row[x]]  # Swap x and y to match lat/lon\n                marker = folium.Marker(location=location, popup=row[label] if label else None)\n                marker.add_to(marker_cluster)\n\n            #markercluster = \n            #self.add_points_from_csv(markercluster)\n\n\n        def add_button(self, position = \"topleft\", **kwargs):\n            import ipywidgets as widgets\n            from IPython.display import display\n            from ipyfilechooser import FileChooser\n\n            allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n            if position not in allowed_positions:\n                raise Exception(f\"position must be one of {allowed_positions}\")\n\n            button = widgets.Button(\n                description='Create Marker Cluster',\n                disabled=False,\n                button_style='', # 'success', 'info', 'warning', 'danger' or ''\n                tooltip='Click me',\n                icon='check' # (FontAwesome names without the `fa-` prefix)\n            )\n\n            marker_ctrl = ipyleaflet.WidgetControl(widget=button, position= \"topleft\")\n            self.create_marker_cluster_tool(marker_ctrl)\n\n            def create_marker_cluster(self):\n                filepath = self.file_chooser.selected_path\n                if filepath:\n                    # Load CSV data into a pandas DataFrame\n                    df = pd.read_csv(filepath)\n\n                    # Create a MarkerCluster layer\n                    marker_cluster = MarkerCluster(name=\"Marker cluster\")\n\n                    # Iterate over rows and add markers to the cluster\n                    for index, row in df.iterrows():\n                        location = [row[\"latitude\"], row[\"longitude\"]]\n                        marker = folium.Marker(location=location)\n                        marker.add_to(marker_cluster)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_bar","title":"<code>add_bar(self, x, y)</code>","text":"<p>Add a bar graph to the map.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>Data to use for the x-axis.</p> required <code>y</code> <code>str</code> <p>Data to use for the y-axis.</p> required <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> required <p>Returns:</p> Type Description <code>matplotlib.plot</code> <p>Generates a bar graph. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_bar(self, x, y):\n\"\"\"Add a bar graph to the map.\n\n    Args:\n        x (str, optional): Data to use for the x-axis.\n        y (str, optional): Data to use for the y-axis.\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n    Returns:\n        matplotlib.plot: Generates a bar graph. \n    \"\"\"\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    plt.style.use('_mpl-gallery')\n\n    # plot\n    fig, ax = plt.subplots()\n    ax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\n    ax.set(xlabel='x', ylabel='y', title='Bar Graph')\n\n    plt.show()\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a base layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>dict</code> <p>The basemap layer from an xyz url.</p> required <p>Returns:</p> Type Description <code>xyzservices.providers</code> <p>Adds a tile layer as a basemap.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a base layer to the map.\n\n    Args:\n        basemap (dict): The basemap layer from an xyz url.\n\n    Returns:\n        xyzservices.providers: Adds a tile layer as a basemap.\n    \"\"\"\n\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"satellite\":\n        url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"terrain\":\n        url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url() \n            attribution = basemap.attribution\n            self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_chart","title":"<code>add_chart(self, position='bottomleft', **kwargs)</code>","text":"<p>Add a figure to the map.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str | ipywidgets.Widget | object</code> <p>The chart to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"bottomright\".</p> <code>'bottomleft'</code> <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipywidgets.chart</code> <p>Adds a chart dropdown widget to map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_chart(self, position=\"bottomleft\", **kwargs):\n\"\"\"Add a figure to the map.\n\n    Args:\n        content (str | ipywidgets.Widget | object): The chart to add.\n        position (str, optional): The position of the widget. Defaults to \"bottomright\".\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n    Returns:\n        ipywidgets.chart: Adds a chart dropdown widget to map. \n    \"\"\"\n    import streamlit as st\n    import ipywidgets as widgets\n\n    allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n    if position not in allowed_positions:\n        raise Exception(f\"position must be one of {allowed_positions}\")\n\n    chart_type = widgets.Dropdown(\n        options=['PLOT','BAR','PIE'],\n        value=None,\n        description='Chart:',\n        style={'description_width': 'initial'},\n        layout=widgets.Layout(width='250px')\n    )\n\n    chart_ctrl = ipyleaflet.WidgetControl(widget=chart_type, position=position)\n    self.add_control(chart_ctrl)\n\n    def change_chart(change):\n        if change['new']:\n            selected_option = chart_type.value\n            self.add_widget(selected_option, position=position)\n\n    chart_type.observe(change_chart, names='value')\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.DrawControl</code> <p>Draw control.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the draw control.\n\n    Returns:\n        ipyleaflet.DrawControl: Draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the fullscreen control.</p> required <p>Returns:</p> Type Description <code>ipyleaflet.FullscreenControl</code> <p>Allows control of screensize.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the fullscreen control.\n\n    Returns:\n        ipyleaflet.FullscreenControl: Allows control of screensize.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the GeoJSON layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.Geojson</code> <p>Adds a GeoJSON layer to map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n    Args:\n        data (dict): The GeoJSON data.\n        kwargs: Keyword arguments to pass to the GeoJSON layer.\n\n    Returns:\n        ipyleaflet.Geojson: Adds a GeoJSON layer to map. \n    \"\"\"\n    import json\n\n    #for file paths:\n    if isinstance(data, str):\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_image","title":"<code>add_image(self, path, w=250, h=250)</code>","text":"<p>Adds a small image (like your logo) to the bottom right of the map</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>the filepath of the image</p> required <code>w</code> <code>int) </code> <p>width of the image (defaults 250 px)</p> <code>250</code> <code>h</code> <code>int) </code> <p>height of the image (defaults 250 px)</p> <code>250</code> <p>Returns:</p> Type Description <code>ipywidgets.image</code> <p>Adds an image to the map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_image(self, path, w=250, h=250):\n\"\"\"Adds a small image (like your logo) to the bottom right of the map\n    Args:\n        file (str): the filepath of the image\n        w (int) : width of the image (defaults 250 px)\n        h (int) : height of the image (defaults 250 px)\n\n    Returns:\n        ipywidgets.image: Adds an image to the map. \n    \"\"\"\n    import ipywidgets as widgets\n\n    file = open(path, \"rb\")\n    image = file.read()\n    i = widgets.Image(\n        value=image,\n        format='png',\n        width=w,\n        height=h,\n    )\n\n    output_widget = widgets.Output()\n    output_control = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n    self.add_control(output_control)\n    with output_widget:\n        display(i)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the layers control.</p> required <p>Returns:</p> Type Description <code>ipyleaflet.LayersControl</code> <p>The search control.   </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the layers control.\n\n    Returns:\n        ipyleaflet.LayersControl: The search control.   \n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_pie","title":"<code>add_pie(self, x)</code>","text":"<p>Add a pie chart to the map.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>Data to use for the pie chart.</p> required <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> required <p>Returns:</p> Type Description <code>matplotlib.plot</code> <p>Generates a pie graph. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_pie(self, x):\n\"\"\"Add a pie chart to the map.\n\n    Args:\n        x (str, optional): Data to use for the pie chart.\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n    Returns:\n        matplotlib.plot: Generates a pie graph. \n    \"\"\"\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    plt.style.use('_mpl-gallery-nogrid')\n\n    # plot\n    fig, ax = plt.subplots()\n    ax.pie(x, radius=3, wedgeprops={\"linewidth\": 1, \"edgecolor\": \"white\"}, frame=True)\n    ax.set(xlabel='x', title='Pie Chart')\n\n    plt.show()\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_plot","title":"<code>add_plot(self, x, y, **kwargs)</code>","text":"<p>Add a plot to the map.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>Data to use for the x-axis.</p> required <code>y</code> <code>str</code> <p>Data to use for the y-axis.</p> required <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> <code>{}</code> <p>Returns:</p> Type Description <code>matplotlib.plot</code> <p>Generates a plot graph. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_plot(self, x, y, **kwargs):\n\"\"\"Add a plot to the map.\n\n    Args:\n        x (str, optional): Data to use for the x-axis.\n        y (str, optional): Data to use for the y-axis.\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n    Returns:\n        matplotlib.plot: Generates a plot graph. \n    \"\"\"\n\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    plt.style.use('_mpl-gallery')\n\n    # plot\n    fig, ax = plt.subplots()\n    ax.plot(x, y, linewidth=2.0)\n    ax.set(xlabel='x', ylabel='y', title='Plot')\n\n    plt.show()\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>ipyleaflet.raster</code> <p>Adds a raster image to the map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n\n    Returns:\n        ipyleaflet.raster: Adds a raster image to the map. \n    \"\"\"\n    import requests\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = requests.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = requests.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.SearchControl</code> <p>The search control.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n    Args:\n        kwargs: Keyword arguments to pass to the search control.\n\n    Returns:\n        ipyleaflet.SearchControl: The search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required <p>Returns:</p> Type Description <code>ipyleaflet.ShapeFile</code> <p>Adds a shapefile to map.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n\n    Returns:\n        ipyleaflet.ShapeFile: Adds a shapefile to map.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL template of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer.</p> <code>''</code> <code>name</code> <code>str</code> <p>The name of the tile layer. Defaults to \"OpenStreetMap\".</p> required <code>kwargs</code> <p>Keyword arguments to pass to the tile layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.TileLayer</code> <p>Adds a new layer to the map.</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n    Args:\n        url (str): The URL template of the tile layer.\n        attribution (str): The attribution of the tile layer.\n        name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n        kwargs: Keyword arguments to pass to the tile layer.\n\n    Returns:\n        ipyleaflet.TileLayer: Adds a new layer to the map.\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright', **kwargs)</code>","text":"<p>Adds a toolbar using ipywidgets to change the basemap.</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>thinkgreen.Map</code> <p>The dropdown widget.</p> required <p>Returns:</p> Type Description <code>ipywidgets</code> <p>The tool GUI widget</p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_toolbar(self, position=\"topright\", **kwargs):\n\"\"\"Adds a toolbar using ipywidgets to change the basemap.\n\n    Args:\n        m (thinkgreen.Map, optional): The dropdown widget.\n\n    Returns:\n        ipywidgets: The tool GUI widget\n    \"\"\"\n\n    import ipywidgets as widgets \n    allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n    if position not in allowed_positions:\n        raise Exception(f\"position must be one of {allowed_positions}\")\n\n    basemap = widgets.Dropdown(\n    options=['ROADMAP', 'SATELLITE', 'TERRAIN'],\n    value=None,\n    description='Basemap:',\n    style={'description_width': 'initial'},\n    layout=widgets.Layout(width='250px')\n    )\n\n    basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n    self.add_control(basemap_ctrl)\n    def change_basemap(change):\n        if change['new']:\n            self.add_basemap(basemap.value)\n\n    basemap.observe(change_basemap, names='value')\n\n    def toolbar_click(b):\n        with b:\n            b.clear_output()\n\n            if b.icon == 'map':\n                self.add_control(basemap_ctrl)\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_vector","title":"<code>add_vector(self, data, name, **kwarags)</code>","text":"<p>Adds a vector layer to the map. Can be GeoJson, shapefile, GeoDataFrame, etc</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>the vector data</p> required <code>name</code> <p>the type of data. example: 'GeoJson', 'Shapefile', 'GeoDataFrame'</p> required <code>kwargs</code> <p>Keyword arguments to pass to the layer.</p> required <p>Returns:</p> Type Description <code>ipyleaflet.vector</code> <p>Adds a vector layer to the map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_vector(self, data, name, **kwarags):\n\"\"\"Adds a vector layer to the map.\n    Can be GeoJson, shapefile, GeoDataFrame, etc\n    Args:\n        data: the vector data\n        name: the type of data. example: 'GeoJson', 'Shapefile', 'GeoDataFrame'\n        kwargs: Keyword arguments to pass to the layer.\n\n    Returns:\n        ipyleaflet.vector: Adds a vector layer to the map. \n    \"\"\"\n    if name == \"GeoJson\":\n        self.add_geojson(self, data, name, **kwargs)\n    elif name == \"Shapefile\":\n        self.add_shp(self, data, name, **kwargs)\n    elif name == \"GeoDataFrame\":\n        self.add_geodf(self, data, name, **kwargs)\n    else:\n        print(\"This type of vector is not supported yet.\")\n</code></pre>"},{"location":"thinkgreen/#thinkgreen.thinkgreen.Map.add_widget","title":"<code>add_widget(self, content, position='bottomright', **kwargs)</code>","text":"<p>Add a widget (e.g., text, HTML, figure) to the map.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str | ipywidgets.Widget | object</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"bottomright\".</p> <code>'bottomright'</code> <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.WidgetControl</code> <p>Adds a widget to the map. </p> Source code in <code>thinkgreen/thinkgreen.py</code> <pre><code>def add_widget(self, content, position=\"bottomright\", **kwargs):\n\"\"\"Add a widget (e.g., text, HTML, figure) to the map.\n\n    Args:\n        content (str | ipywidgets.Widget | object): The widget to add.\n        position (str, optional): The position of the widget. Defaults to \"bottomright\".\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n\n    Returns:\n        ipyleaflet.WidgetControl: Adds a widget to the map. \n    \"\"\"\n\n    allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n    if position not in allowed_positions:\n        raise Exception(f\"position must be one of {allowed_positions}\")\n\n    if \"layout\" not in kwargs:\n        kwargs[\"layout\"] = widgets.Layout(padding=\"0px 4px 0px 4px\")\n    try:\n        if isinstance(content, str):\n            widget = widgets.HTML(value=content, **kwargs)\n            control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        else:\n            output = widgets.Output(**kwargs)\n            with output:\n                display(content)\n            control = ipyleaflet.WidgetControl(widget=output, position=position)\n        self.add(control)\n\n    except Exception as e:\n        raise Exception(f\"Error adding widget: {e}\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>You can try out leafmap by using Google Colab  </p>"},{"location":"usage/#to-use-thinkgreen-in-a-project","title":"To use thinkgreen in a project:","text":"<pre><code>import thinkgreen\n</code></pre>"},{"location":"usage/#create-an-interactive-map","title":"Create an interactive map","text":"<pre><code>m = thinkgreen.Map(center = [36, -84], zoom = 10)\n\nm\n</code></pre>"},{"location":"usage/#another-way-to-create-an-interactive-map","title":"Another way to create an interactive map","text":"<pre><code>import folium\n\nm = folium.Map(location =[36, -84], zoom_start=10)\n\nm\n</code></pre>"},{"location":"usage/#customize-base-layers","title":"Customize base layers","text":"<pre><code>m = thinkgreen.Map(center = [36, -84], zoom = 10)\nm.add_search_control(position=\"topright\")\nm.add_layers_control()\nm.add_tile_layer(url=url, name=\"Google Maps\", attribution=\"Google\")\nm.add_basemap(basemap=\"satellite\")\n\nm\n</code></pre>"},{"location":"usage/#customize-basemaps","title":"Customize basemaps","text":"<pre><code>m = thinkgreen.Map()\n\nm.add_toolbar()\n\nm\n</code></pre>"},{"location":"usage/#adding-different-types-of-graphs","title":"Adding different types of graphs","text":"<pre><code>m = thinkgreen.Map() \n\nm.add_bar(x=[1,2,3,4], y=[1,2,3,4])\n\nm.add_pie(x=[1,2,3,4])\n\nm.add_plot(x=[1,2,3,4], y=[1,2,3,4])\n</code></pre>"},{"location":"usage/#add-shapefiles-or-geojson-layers","title":"Add Shapefiles or GeoJSON layers","text":"<pre><code>m = thinkgreen.Map()\n\nm.add_shp(\"filename\")\n\nm.add_geojson(\"filename\")\n</code></pre>"},{"location":"examples/FinalExam/","title":"FinalExam","text":"In\u00a0[1]: Copied! <pre>import thinkgreen\n</pre> import thinkgreen In\u00a0[2]: Copied! <pre>m = thinkgreen.Map()\n\nm\n</pre> m = thinkgreen.Map()  m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> <p>Question 1</p> In\u00a0[3]: Copied! <pre>m.add_csv('sample_data/world_cities.csv','output.shp', 'shapefile')\n</pre> m.add_csv('sample_data/world_cities.csv','output.shp', 'shapefile')  <p>Question 2</p> In\u00a0[4]: Copied! <pre>m.add_points_from_csv('sample_data/world_cities.csv', x='longitude', y='latitude', label='name', layer_name='My Cluster')\n</pre>  m.add_points_from_csv('sample_data/world_cities.csv', x='longitude', y='latitude', label='name', layer_name='My Cluster')   <p>Question 3</p> In\u00a0[5]: Copied! <pre>m.add_button()\n</pre> m.add_button() <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 m.add_button()\n\nFile c:\\users\\olamm\\thinkgreen\\thinkgreen\\thinkgreen.py:536, in Map.add_button(self, position, **kwargs)\n    527 button = widgets.Button(\n    528     description='Create Marker Cluster',\n    529     disabled=False,\n   (...)\n    532     icon='check' # (FontAwesome names without the `fa-` prefix)\n    533 )\n    535 marker_ctrl = ipyleaflet.WidgetControl(widget=button, position= \"topleft\")\n--&gt; 536 self.create_marker_cluster_tool(marker_ctrl)\n    538 def create_marker_cluster(self):\n    539     filepath = self.file_chooser.selected_path\n\nAttributeError: 'Map' object has no attribute 'create_marker_cluster_tool'</pre>"},{"location":"examples/Raster/","title":"Raster","text":"<p>Import thinkgreen</p> In\u00a0[3]: Copied! <pre>import thinkgreen\n</pre> import thinkgreen <p>Find a raster image that you would like to include in the map. This example here uses open source data from Digital Globe of satellite imagery from the Mauritius oil spill.</p> In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" <p>Add raster layer to map.</p> In\u00a0[5]: Copied! <pre>m = thinkgreen.Map()\n\nm.add_raster(url, name=\"Cloud Optimazation\")\n\nm\n</pre> m = thinkgreen.Map()  m.add_raster(url, name=\"Cloud Optimazation\")  m Out[5]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/","title":"Working With COG","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment this line if you need to install the dependencies\n# !pip install folium httpx\n</pre> # Uncomment this line if you need to install the dependencies # !pip install folium httpx In\u00a0[2]: Copied! <pre>import json\n\nimport httpx\n\nfrom folium import Map, TileLayer\n\n%matplotlib inline\n</pre> import json  import httpx  from folium import Map, TileLayer  %matplotlib inline In\u00a0[4]: Copied! <pre>titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind.\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind. url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[5]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nprint(r)\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] print(r) <pre>{'bounds': [57.664053823239804, -20.55473177712791, 57.84021477996238, -20.25261582755764], 'minzoom': 10, 'maxzoom': 18, 'band_metadata': [['b1', {}], ['b2', {}], ['b3', {}]], 'band_descriptions': [['b1', ''], ['b2', ''], ['b3', '']], 'dtype': 'uint8', 'nodata_type': 'Mask', 'colorinterp': ['red', 'green', 'blue'], 'width': 38628, 'height': 66247, 'count': 3, 'overviews': [2, 4, 8, 16, 32, 64, 128], 'driver': 'GTiff'}\n</pre> In\u00a0[6]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r, indent=4))\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r, indent=4)) <pre>{\n    \"b1\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 36.94901407469342,\n        \"count\": 574080.0,\n        \"sum\": 21211690.0,\n        \"std\": 48.282133573955264,\n        \"median\": 3.0,\n        \"majority\": 1.0,\n        \"minority\": 246.0,\n        \"unique\": 256.0,\n        \"histogram\": [\n            [\n                330584.0,\n                54820.0,\n                67683.0,\n                57434.0,\n                30305.0,\n                14648.0,\n                9606.0,\n                5653.0,\n                2296.0,\n                1051.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 171.0,\n        \"percentile_2\": 0.0\n    },\n    \"b2\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 57.1494356187291,\n        \"count\": 574080.0,\n        \"sum\": 32808348.0,\n        \"std\": 56.300819175100656,\n        \"median\": 37.0,\n        \"majority\": 5.0,\n        \"minority\": 0.0,\n        \"unique\": 256.0,\n        \"histogram\": [\n            [\n                271018.0,\n                34938.0,\n                54030.0,\n                69429.0,\n                70260.0,\n                32107.0,\n                29375.0,\n                9697.0,\n                2001.0,\n                1225.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 180.0,\n        \"percentile_2\": 5.0\n    },\n    \"b3\": {\n        \"min\": 0.0,\n        \"max\": 255.0,\n        \"mean\": 51.251764562430324,\n        \"count\": 574080.0,\n        \"sum\": 29422613.0,\n        \"std\": 39.65505035854822,\n        \"median\": 36.0,\n        \"majority\": 16.0,\n        \"minority\": 252.0,\n        \"unique\": 254.0,\n        \"histogram\": [\n            [\n                203263.0,\n                150865.0,\n                104882.0,\n                42645.0,\n                30652.0,\n                25382.0,\n                12434.0,\n                2397.0,\n                1097.0,\n                463.0\n            ],\n            [\n                0.0,\n                25.5,\n                51.0,\n                76.5,\n                102.0,\n                127.5,\n                153.0,\n                178.5,\n                204.0,\n                229.5,\n                255.0\n            ]\n        ],\n        \"valid_percent\": 93.75,\n        \"masked_pixels\": 38272.0,\n        \"valid_pixels\": 574080.0,\n        \"percentile_98\": 158.0,\n        \"percentile_2\": 14.0\n    }\n}\n</pre> In\u00a0[8]: Copied! <pre>import thinkgreen\n</pre> import thinkgreen In\u00a0[9]: Copied! <pre>m = thinkgreen.Map()\n\nm\n</pre> m = thinkgreen.Map()  m Out[9]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[7]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=13\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"DigitalGlobe OpenData\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=13 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"DigitalGlobe OpenData\" ) aod_layer.add_to(m) m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[11]: Copied! <pre>url = r['tiles'][0]\n</pre> url = r['tiles'][0] In\u00a0[12]: Copied! <pre>m.add_tile_layer(url, name=\"Cloud Optimized GeoTIFF\", attribution=\"DigitlGlobe\")\n</pre> m.add_tile_layer(url, name=\"Cloud Optimized GeoTIFF\", attribution=\"DigitlGlobe\") In\u00a0[13]: Copied! <pre>url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"\n\n# Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(r)\nprint(\"Data is of type:\", r[\"dtype\"])\n\n# This dataset has statistics metadata\nminv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"]\nprint(\"With values from \", minv, \"to \", maxv)\n</pre>  url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"  # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  print(r) print(\"Data is of type:\", r[\"dtype\"])  # This dataset has statistics metadata minv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"] print(\"With values from \", minv, \"to \", maxv)   <pre>{'bounds': [7.090624928537461, 45.91605844102821, 7.1035698381384185, 45.92509300025415], 'minzoom': 15, 'maxzoom': 18, 'band_metadata': [['b1', {'STATISTICS_COVARIANCES': '10685.98787505646', 'STATISTICS_EXCLUDEDVALUES': '-9999', 'STATISTICS_MAXIMUM': '2015.0944824219', 'STATISTICS_MEAN': '1754.471184271', 'STATISTICS_MINIMUM': '1615.8128662109', 'STATISTICS_SKIPFACTORX': '1', 'STATISTICS_SKIPFACTORY': '1', 'STATISTICS_STDDEV': '103.37305197708'}]], 'band_descriptions': [['b1', '']], 'dtype': 'float32', 'nodata_type': 'Nodata', 'colorinterp': ['gray'], 'driver': 'GTiff', 'width': 2000, 'nodata_value': -9999.0, 'overviews': [2, 4, 8], 'height': 2000, 'count': 1}\nData is of type: float32\nWith values from  1615.8128662109 to  2015.0944824219\n</pre> In\u00a0[\u00a0]: Copied! <pre># We could get the min/max values using the statistics endpoint\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r[\"1\"], indent=4))\n</pre> # We could get the min/max values using the statistics endpoint r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r[\"1\"], indent=4)) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply linear rescaling using Min/Max value</li> </ol> <p>This is needed to rescale the value to byte (0 -&gt; 255) which can then be encoded in JPEG or PNG</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply ColorMap</li> </ol> <p>Now that the data is rescaled to byte values (0 -&gt; 255) we can apply a colormap</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\",\n        \"colormap_name\": \"terrain\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\",         \"colormap_name\": \"terrain\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply non-linear colormap (intervals)</li> </ol> <p>see https://cogeotiff.github.io/rio-tiler/colormap/#intervals-colormaps</p> In\u00a0[\u00a0]: Copied! <pre>import json\n\ncmap = json.dumps(\n    [\n        # ([min, max], [r, g, b, a])\n        ([0, 1500], [255,255,204, 255]),\n        ([1500, 1700], [161,218,180, 255]),\n        ([1700, 1900], [65,182,196, 255]),\n        ([1900, 2000], [44,127,184, 255]),\n        ([2000, 3000], [37,52,148, 255]),\n    ]\n)\n# https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5\n\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"colormap\": cmap\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> import json  cmap = json.dumps(     [         # ([min, max], [r, g, b, a])         ([0, 1500], [255,255,204, 255]),         ([1500, 1700], [161,218,180, 255]),         ([1700, 1900], [65,182,196, 255]),         ([1900, 2000], [44,127,184, 255]),         ([2000, 3000], [37,52,148, 255]),     ] ) # https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5  r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"colormap\": cmap     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#working-with-cog","title":"Working With COG\u00b6","text":"<p>For this demo we will use the new <code>DigitalGlobe OpenData</code> dataset https://www.digitalglobe.com/ecosystem/open-data</p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#requirements","title":"Requirements\u00b6","text":"<ul> <li>folium</li> <li>httpx</li> </ul> <p><code>pip install folium httpx</code></p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-info","title":"Get COG Info\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-metadata","title":"Get COG Metadata\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#work-with-non-byte-data","title":"Work with non-byte data\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":"<ol> <li>Without <code>rescaling</code> values, TiTiler will return black/grey tiles because it will rescale the data base on min/max value of the datatype.</li> </ol>"},{"location":"examples/folium/","title":"Folium","text":"<p>Install Folium</p> In\u00a0[4]: Copied! <pre>import folium\n</pre> import folium <p>Create an interactive map, and specify the default map center and zoom level. Choose a tile base layer.</p> In\u00a0[7]: Copied! <pre>m = folium.Map(location =[36, -84], zoom_start=10)\n\nm\n</pre> m = folium.Map(location =[36, -84], zoom_start=10)  m  Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Save the map.</p> In\u00a0[\u00a0]: Copied! <pre>m.save(\"index.html\")\n</pre> m.save(\"index.html\")"},{"location":"examples/image/","title":"Image","text":"In\u00a0[1]: Copied! <pre>import thinkgreen\n</pre> import thinkgreen In\u00a0[3]: Copied! <pre>from thinkgreen import Map\nimport ipywidgets as w\nfrom ipyleaflet import WidgetControl\n\nm = Map(center = [36, -84], zoom = 10)\npath = 'sample_data\\sunsphere.png'\nm.add_image(path)\n\nm\n</pre> from thinkgreen import Map import ipywidgets as w from ipyleaflet import WidgetControl  m = Map(center = [36, -84], zoom = 10) path = 'sample_data\\sunsphere.png' m.add_image(path)  m Out[3]: <pre>Map(center=[36, -84], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_te\u2026</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"<p>Import ipyleaflet</p> In\u00a0[3]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet <p>Set the visibility controls for the map.</p> In\u00a0[5]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap = basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(55,55),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap = basemap_to_tiles(basemaps.OpenTopoMap),     center=(55,55),     zoom=4 )  m Out[5]: <pre>Map(center=[55, 55], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_tex\u2026</pre>"},{"location":"examples/thinkgreen/","title":"Thinkgreen","text":"<p>Import thinkgreen.</p> In\u00a0[1]: Copied! <pre>import thinkgreen\n</pre> import thinkgreen  <p>Choose a basemap.</p> In\u00a0[2]: Copied! <pre>url = \"http://mt0.google.com/vt/lyrs=r&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n</pre> url = \"http://mt0.google.com/vt/lyrs=r&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" <p>Set the visibility properties and display the map.</p> In\u00a0[3]: Copied! <pre>m = thinkgreen.Map(center = [36, -84], zoom = 10)\nm.add_search_control(position=\"topright\")\nm.add_layers_control()\nm.add_tile_layer(url=url, name=\"Google Maps\", attribution=\"Google\")\nm.add_basemap(basemap=\"satellite\")\n\nm\n</pre> m = thinkgreen.Map(center = [36, -84], zoom = 10) m.add_search_control(position=\"topright\") m.add_layers_control() m.add_tile_layer(url=url, name=\"Google Maps\", attribution=\"Google\") m.add_basemap(basemap=\"satellite\")  m Out[3]: <pre>Map(center=[36, -84], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_te\u2026</pre> <p>Change the basemap with a dropdown menu.</p> In\u00a0[4]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar() <p>Add a shapefile.</p> In\u00a0[5]: Copied! <pre>m.add_shp(\"sample_data\\countries.shp\")\n</pre> m.add_shp(\"sample_data\\countries.shp\") <p>Add a GeoJSON file.</p> In\u00a0[6]: Copied! <pre>m.add_geojson(\"sample_data\\sample.geojson\")\n</pre> m.add_geojson(\"sample_data\\sample.geojson\")"},{"location":"examples/widgets/","title":"Widgets","text":"<p>Import the necessary packages for adding widgets.</p> In\u00a0[1]: Copied! <pre>import thinkgreen\nimport pandas as pd\nimport numpy as np\nimport ipywidgets as widgets\nfrom ipywidgets import DOMWidget\nimport matplotlib.pyplot as plt\n</pre> import thinkgreen import pandas as pd import numpy as np import ipywidgets as widgets from ipywidgets import DOMWidget import matplotlib.pyplot as plt  <p>Display the map.</p> In\u00a0[2]: Copied! <pre>m = thinkgreen.Map()\n\nm\n</pre> m = thinkgreen.Map()  m Out[2]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> <p>Add a dropdown menu to be able to change between graphs to display on the map.</p> In\u00a0[3]: Copied! <pre>m.add_chart()\n</pre> m.add_chart() <p>Create a bar chart.</p> In\u00a0[4]: Copied! <pre>bar = m.add_bar(x=[1,2,3,4], y=[1,2,3,4])\n</pre> bar = m.add_bar(x=[1,2,3,4], y=[1,2,3,4]) <p>Add the bar chart to the map and specify the position.</p> In\u00a0[5]: Copied! <pre>plt.style.use('_mpl-gallery')\nx=[1,2,3,4]\ny=[1,2,3,4]\n# plot\nfig, ax = plt.subplots()\nax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\nax.set(xlabel='x', ylabel='y', title='Bar Graph')\n\nplt.show()\n</pre> plt.style.use('_mpl-gallery') x=[1,2,3,4] y=[1,2,3,4] # plot fig, ax = plt.subplots() ax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7) ax.set(xlabel='x', ylabel='y', title='Bar Graph')  plt.show() In\u00a0[6]: Copied! <pre>m.add_widget(fig, position='bottomright')\n</pre> m.add_widget(fig, position='bottomright') <p>Create a pie chart.</p> In\u00a0[7]: Copied! <pre>pie = m.add_pie(x=[1,2,3,4])\n</pre> pie = m.add_pie(x=[1,2,3,4]) <p>Create a line chart.</p> In\u00a0[8]: Copied! <pre>plot = m.add_plot(x=[1,2,3,4], y=[1,2,3,4])\n</pre> plot = m.add_plot(x=[1,2,3,4], y=[1,2,3,4])"}]}